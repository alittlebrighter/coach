/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var coach_pb = require('./coach_pb.js');
goog.exportSymbol('proto.coach.EnvVar', null, global);
goog.exportSymbol('proto.coach.GetScriptsResponse', null, global);
goog.exportSymbol('proto.coach.RunEventIn', null, global);
goog.exportSymbol('proto.coach.RunEventOut', null, global);
goog.exportSymbol('proto.coach.ScriptsQuery', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.ScriptsQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.ScriptsQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.ScriptsQuery.displayName = 'proto.coach.ScriptsQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.ScriptsQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.ScriptsQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.ScriptsQuery} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.ScriptsQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    tagquery: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string tagQuery = 1;
 * @return {string}
 */
proto.coach.ScriptsQuery.prototype.getTagquery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.ScriptsQuery.prototype.setTagquery = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.GetScriptsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coach.GetScriptsResponse.repeatedFields_, null);
};
goog.inherits(proto.coach.GetScriptsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.GetScriptsResponse.displayName = 'proto.coach.GetScriptsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coach.GetScriptsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.GetScriptsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.GetScriptsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.GetScriptsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.GetScriptsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptsList: jspb.Message.toObjectList(msg.getScriptsList(),
    coach_pb.DocumentedScript.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * repeated DocumentedScript scripts = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.coach.DocumentedScript>}
 */
proto.coach.GetScriptsResponse.prototype.getScriptsList = function() {
  return /** @type{!Array.<!proto.coach.DocumentedScript>} */ (
    jspb.Message.getRepeatedWrapperField(this, coach_pb.DocumentedScript, 1));
};


/** @param {!Array.<!proto.coach.DocumentedScript>} value */
proto.coach.GetScriptsResponse.prototype.setScriptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.coach.DocumentedScript=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coach.DocumentedScript}
 */
proto.coach.GetScriptsResponse.prototype.addScripts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.coach.DocumentedScript, opt_index);
};


proto.coach.GetScriptsResponse.prototype.clearScriptsList = function() {
  this.setScriptsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.RunEventIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coach.RunEventIn.repeatedFields_, null);
};
goog.inherits(proto.coach.RunEventIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.RunEventIn.displayName = 'proto.coach.RunEventIn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coach.RunEventIn.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.RunEventIn.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.RunEventIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.RunEventIn} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.RunEventIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    input: jspb.Message.getFieldWithDefault(msg, 1, ""),
    envList: jspb.Message.toObjectList(msg.getEnvList(),
    proto.coach.EnvVar.toObject, includeInstance),
    responsesize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string input = 1;
 * @return {string}
 */
proto.coach.RunEventIn.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.RunEventIn.prototype.setInput = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated EnvVar env = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.coach.EnvVar>}
 */
proto.coach.RunEventIn.prototype.getEnvList = function() {
  return /** @type{!Array.<!proto.coach.EnvVar>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.coach.EnvVar, 2));
};


/** @param {!Array.<!proto.coach.EnvVar>} value */
proto.coach.RunEventIn.prototype.setEnvList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.coach.EnvVar=} opt_value
 * @param {number=} opt_index
 * @return {!proto.coach.EnvVar}
 */
proto.coach.RunEventIn.prototype.addEnv = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.coach.EnvVar, opt_index);
};


proto.coach.RunEventIn.prototype.clearEnvList = function() {
  this.setEnvList([]);
};


/**
 * optional uint32 responseSize = 3;
 * @return {number}
 */
proto.coach.RunEventIn.prototype.getResponsesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coach.RunEventIn.prototype.setResponsesize = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.RunEventOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.RunEventOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.RunEventOut.displayName = 'proto.coach.RunEventOut';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.RunEventOut.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.RunEventOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.RunEventOut} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.RunEventOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: jspb.Message.getFieldWithDefault(msg, 1, ""),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    exitcode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string output = 1;
 * @return {string}
 */
proto.coach.RunEventOut.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.RunEventOut.prototype.setOutput = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.coach.RunEventOut.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coach.RunEventOut.prototype.setError = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 exitCode = 3;
 * @return {number}
 */
proto.coach.RunEventOut.prototype.getExitcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.coach.RunEventOut.prototype.setExitcode = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.EnvVar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.EnvVar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.EnvVar.displayName = 'proto.coach.EnvVar';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.EnvVar.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.EnvVar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.EnvVar} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.EnvVar.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string name = 1;
 * @return {string}
 */
proto.coach.EnvVar.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.EnvVar.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.coach.EnvVar.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coach.EnvVar.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto.coach);
