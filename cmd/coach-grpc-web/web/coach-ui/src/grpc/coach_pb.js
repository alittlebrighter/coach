/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.coach.AuditLog', null, global);
goog.exportSymbol('proto.coach.CommandContext', null, global);
goog.exportSymbol('proto.coach.DocumentedScript', null, global);
goog.exportSymbol('proto.coach.HistoryRecord', null, global);
goog.exportSymbol('proto.coach.Script', null, global);
goog.exportSymbol('proto.coach.Session', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.Script = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coach.Script.repeatedFields_, null);
};
goog.inherits(proto.coach.Script, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.Script.displayName = 'proto.coach.Script';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coach.Script.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.Script.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.Script.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.Script} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.Script.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variablesList: jspb.Message.getField(msg, 2),
    shell: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string content = 1;
 * @return {string}
 */
proto.coach.Script.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.Script.prototype.setContent = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string variables = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.coach.Script.prototype.getVariablesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {!Array.<string>} value */
proto.coach.Script.prototype.setVariablesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.coach.Script.prototype.addVariables = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.coach.Script.prototype.clearVariablesList = function() {
  this.setVariablesList([]);
};


/**
 * optional string shell = 3;
 * @return {string}
 */
proto.coach.Script.prototype.getShell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.coach.Script.prototype.setShell = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.AuditLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.AuditLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.AuditLog.displayName = 'proto.coach.AuditLog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.AuditLog.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.AuditLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.AuditLog} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.AuditLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    createdby: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updated: (f = msg.getUpdated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedby: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional google.protobuf.Timestamp created = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.coach.AuditLog.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.coach.AuditLog.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.coach.AuditLog.prototype.clearCreated = function() {
  this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.AuditLog.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string createdBy = 2;
 * @return {string}
 */
proto.coach.AuditLog.prototype.getCreatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coach.AuditLog.prototype.setCreatedby = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp updated = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.coach.AuditLog.prototype.getUpdated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.coach.AuditLog.prototype.setUpdated = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.coach.AuditLog.prototype.clearUpdated = function() {
  this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.AuditLog.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string updatedBy = 4;
 * @return {string}
 */
proto.coach.AuditLog.prototype.getUpdatedby = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.coach.AuditLog.prototype.setUpdatedby = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.HistoryRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.HistoryRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.HistoryRecord.displayName = 'proto.coach.HistoryRecord';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.HistoryRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.HistoryRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.HistoryRecord} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.HistoryRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    fullcommand: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tty: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    user: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.coach.HistoryRecord.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.coach.HistoryRecord.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.coach.HistoryRecord.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.coach.HistoryRecord.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string fullCommand = 2;
 * @return {string}
 */
proto.coach.HistoryRecord.prototype.getFullcommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coach.HistoryRecord.prototype.setFullcommand = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string tty = 3;
 * @return {string}
 */
proto.coach.HistoryRecord.prototype.getTty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.coach.HistoryRecord.prototype.setTty = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.coach.HistoryRecord.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.coach.HistoryRecord.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.coach.HistoryRecord.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.HistoryRecord.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string user = 5;
 * @return {string}
 */
proto.coach.HistoryRecord.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.coach.HistoryRecord.prototype.setUser = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.DocumentedScript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.coach.DocumentedScript.repeatedFields_, null);
};
goog.inherits(proto.coach.DocumentedScript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.DocumentedScript.displayName = 'proto.coach.DocumentedScript';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.coach.DocumentedScript.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.DocumentedScript.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.DocumentedScript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.DocumentedScript} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.DocumentedScript.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    script: (f = msg.getScript()) && proto.coach.Script.toObject(includeInstance, f),
    alias: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tagsList: jspb.Message.getField(msg, 4),
    documentation: jspb.Message.getFieldWithDefault(msg, 5, ""),
    auditlog: (f = msg.getAuditlog()) && proto.coach.AuditLog.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.coach.DocumentedScript.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.coach.DocumentedScript.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.coach.DocumentedScript.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.coach.DocumentedScript.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Script script = 2;
 * @return {?proto.coach.Script}
 */
proto.coach.DocumentedScript.prototype.getScript = function() {
  return /** @type{?proto.coach.Script} */ (
    jspb.Message.getWrapperField(this, proto.coach.Script, 2));
};


/** @param {?proto.coach.Script|undefined} value */
proto.coach.DocumentedScript.prototype.setScript = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coach.DocumentedScript.prototype.clearScript = function() {
  this.setScript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.DocumentedScript.prototype.hasScript = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string alias = 3;
 * @return {string}
 */
proto.coach.DocumentedScript.prototype.getAlias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.coach.DocumentedScript.prototype.setAlias = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * repeated string tags = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.coach.DocumentedScript.prototype.getTagsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 4));
};


/** @param {!Array.<string>} value */
proto.coach.DocumentedScript.prototype.setTagsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.coach.DocumentedScript.prototype.addTags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.coach.DocumentedScript.prototype.clearTagsList = function() {
  this.setTagsList([]);
};


/**
 * optional string documentation = 5;
 * @return {string}
 */
proto.coach.DocumentedScript.prototype.getDocumentation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.coach.DocumentedScript.prototype.setDocumentation = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional AuditLog auditLog = 6;
 * @return {?proto.coach.AuditLog}
 */
proto.coach.DocumentedScript.prototype.getAuditlog = function() {
  return /** @type{?proto.coach.AuditLog} */ (
    jspb.Message.getWrapperField(this, proto.coach.AuditLog, 6));
};


/** @param {?proto.coach.AuditLog|undefined} value */
proto.coach.DocumentedScript.prototype.setAuditlog = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.coach.DocumentedScript.prototype.clearAuditlog = function() {
  this.setAuditlog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.DocumentedScript.prototype.hasAuditlog = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.CommandContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.CommandContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.CommandContext.displayName = 'proto.coach.CommandContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.CommandContext.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.CommandContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.CommandContext} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.CommandContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    shell: jspb.Message.getFieldWithDefault(msg, 1, ""),
    os: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string shell = 1;
 * @return {string}
 */
proto.coach.CommandContext.prototype.getShell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.CommandContext.prototype.setShell = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string os = 2;
 * @return {string}
 */
proto.coach.CommandContext.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.coach.CommandContext.prototype.setOs = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.coach.Session = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.coach.Session, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.coach.Session.displayName = 'proto.coach.Session';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.coach.Session.prototype.toObject = function(opt_includeInstance) {
  return proto.coach.Session.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.coach.Session} msg The msg instance to transform.
 * @return {!Object}
 */
proto.coach.Session.toObject = function(includeInstance, msg) {
  var f, obj = {
    tty: jspb.Message.getFieldWithDefault(msg, 1, ""),
    context: (f = msg.getContext()) && proto.coach.CommandContext.toObject(includeInstance, f),
    lastCommand: (f = msg.getLastCommand()) && proto.coach.HistoryRecord.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * optional string tty = 1;
 * @return {string}
 */
proto.coach.Session.prototype.getTty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.coach.Session.prototype.setTty = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CommandContext context = 2;
 * @return {?proto.coach.CommandContext}
 */
proto.coach.Session.prototype.getContext = function() {
  return /** @type{?proto.coach.CommandContext} */ (
    jspb.Message.getWrapperField(this, proto.coach.CommandContext, 2));
};


/** @param {?proto.coach.CommandContext|undefined} value */
proto.coach.Session.prototype.setContext = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.coach.Session.prototype.clearContext = function() {
  this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.Session.prototype.hasContext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HistoryRecord last_command = 3;
 * @return {?proto.coach.HistoryRecord}
 */
proto.coach.Session.prototype.getLastCommand = function() {
  return /** @type{?proto.coach.HistoryRecord} */ (
    jspb.Message.getWrapperField(this, proto.coach.HistoryRecord, 3));
};


/** @param {?proto.coach.HistoryRecord|undefined} value */
proto.coach.Session.prototype.setLastCommand = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.coach.Session.prototype.clearLastCommand = function() {
  this.setLastCommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.coach.Session.prototype.hasLastCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.coach);
