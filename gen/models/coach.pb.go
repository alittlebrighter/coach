// Code generated by protoc-gen-go.
// source: coach.proto
// DO NOT EDIT!

/*
Package models is a generated protocol buffer package.

It is generated from these files:
	coach.proto

It has these top-level messages:
	Script
	AuditLog
	HistoryRecord
	DocumentedScript
	CommandContext
	Session
*/
package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Script struct {
	Content   string   `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	Variables []string `protobuf:"bytes,2,rep,name=variables" json:"variables,omitempty"`
	Shell     string   `protobuf:"bytes,3,opt,name=shell" json:"shell,omitempty"`
}

func (m *Script) Reset()                    { *m = Script{} }
func (m *Script) String() string            { return proto.CompactTextString(m) }
func (*Script) ProtoMessage()               {}
func (*Script) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Script) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Script) GetVariables() []string {
	if m != nil {
		return m.Variables
	}
	return nil
}

func (m *Script) GetShell() string {
	if m != nil {
		return m.Shell
	}
	return ""
}

type AuditLog struct {
	Created   *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=created" json:"created,omitempty"`
	CreatedBy string                     `protobuf:"bytes,2,opt,name=createdBy" json:"createdBy,omitempty"`
	Updated   *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=updated" json:"updated,omitempty"`
	UpdatedBy string                     `protobuf:"bytes,4,opt,name=updatedBy" json:"updatedBy,omitempty"`
}

func (m *AuditLog) Reset()                    { *m = AuditLog{} }
func (m *AuditLog) String() string            { return proto.CompactTextString(m) }
func (*AuditLog) ProtoMessage()               {}
func (*AuditLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AuditLog) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *AuditLog) GetCreatedBy() string {
	if m != nil {
		return m.CreatedBy
	}
	return ""
}

func (m *AuditLog) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *AuditLog) GetUpdatedBy() string {
	if m != nil {
		return m.UpdatedBy
	}
	return ""
}

type HistoryRecord struct {
	Id          []byte                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullCommand string                     `protobuf:"bytes,2,opt,name=fullCommand" json:"fullCommand,omitempty"`
	Tty         string                     `protobuf:"bytes,3,opt,name=tty" json:"tty,omitempty"`
	Timestamp   *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=timestamp" json:"timestamp,omitempty"`
	User        string                     `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
}

func (m *HistoryRecord) Reset()                    { *m = HistoryRecord{} }
func (m *HistoryRecord) String() string            { return proto.CompactTextString(m) }
func (*HistoryRecord) ProtoMessage()               {}
func (*HistoryRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HistoryRecord) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HistoryRecord) GetFullCommand() string {
	if m != nil {
		return m.FullCommand
	}
	return ""
}

func (m *HistoryRecord) GetTty() string {
	if m != nil {
		return m.Tty
	}
	return ""
}

func (m *HistoryRecord) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *HistoryRecord) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type DocumentedScript struct {
	Id            []byte    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Script        *Script   `protobuf:"bytes,2,opt,name=script" json:"script,omitempty"`
	Alias         string    `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Tags          []string  `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Documentation string    `protobuf:"bytes,5,opt,name=documentation" json:"documentation,omitempty"`
	AuditLog      *AuditLog `protobuf:"bytes,6,opt,name=auditLog" json:"auditLog,omitempty"`
}

func (m *DocumentedScript) Reset()                    { *m = DocumentedScript{} }
func (m *DocumentedScript) String() string            { return proto.CompactTextString(m) }
func (*DocumentedScript) ProtoMessage()               {}
func (*DocumentedScript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DocumentedScript) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DocumentedScript) GetScript() *Script {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *DocumentedScript) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *DocumentedScript) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *DocumentedScript) GetDocumentation() string {
	if m != nil {
		return m.Documentation
	}
	return ""
}

func (m *DocumentedScript) GetAuditLog() *AuditLog {
	if m != nil {
		return m.AuditLog
	}
	return nil
}

type CommandContext struct {
	Shell string `protobuf:"bytes,1,opt,name=shell" json:"shell,omitempty"`
	Os    string `protobuf:"bytes,2,opt,name=os" json:"os,omitempty"`
}

func (m *CommandContext) Reset()                    { *m = CommandContext{} }
func (m *CommandContext) String() string            { return proto.CompactTextString(m) }
func (*CommandContext) ProtoMessage()               {}
func (*CommandContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommandContext) GetShell() string {
	if m != nil {
		return m.Shell
	}
	return ""
}

func (m *CommandContext) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

type Session struct {
	Tty         string          `protobuf:"bytes,1,opt,name=tty" json:"tty,omitempty"`
	Context     *CommandContext `protobuf:"bytes,2,opt,name=context" json:"context,omitempty"`
	LastCommand *HistoryRecord  `protobuf:"bytes,3,opt,name=last_command,json=lastCommand" json:"last_command,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Session) GetTty() string {
	if m != nil {
		return m.Tty
	}
	return ""
}

func (m *Session) GetContext() *CommandContext {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Session) GetLastCommand() *HistoryRecord {
	if m != nil {
		return m.LastCommand
	}
	return nil
}

func init() {
	proto.RegisterType((*Script)(nil), "coach.Script")
	proto.RegisterType((*AuditLog)(nil), "coach.AuditLog")
	proto.RegisterType((*HistoryRecord)(nil), "coach.HistoryRecord")
	proto.RegisterType((*DocumentedScript)(nil), "coach.DocumentedScript")
	proto.RegisterType((*CommandContext)(nil), "coach.CommandContext")
	proto.RegisterType((*Session)(nil), "coach.Session")
}

func init() { proto.RegisterFile("coach.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x55, 0xd2, 0x36, 0x6d, 0x27, 0xdb, 0x65, 0x65, 0x2d, 0x92, 0xb5, 0x42, 0xa2, 0x8a, 0x40,
	0x5a, 0x09, 0x29, 0x95, 0x16, 0x04, 0x5c, 0xe9, 0x72, 0xe0, 0xc0, 0xc9, 0x8b, 0x38, 0x70, 0x41,
	0x6e, 0xec, 0xed, 0x5a, 0x72, 0xe2, 0x2a, 0x76, 0xd0, 0xf6, 0x03, 0xf8, 0x10, 0x7e, 0x81, 0x8f,
	0xe0, 0xbb, 0x90, 0x9d, 0x71, 0xb3, 0xe5, 0xc0, 0xde, 0x66, 0x26, 0x2f, 0xef, 0x3d, 0xcf, 0x3c,
	0xc8, 0x2b, 0xc3, 0xab, 0xbb, 0x72, 0xd7, 0x1a, 0x67, 0xc8, 0x24, 0x34, 0x17, 0xcf, 0xb7, 0xc6,
	0x6c, 0xb5, 0x5c, 0x85, 0xe1, 0xa6, 0xbb, 0x5d, 0x39, 0x55, 0x4b, 0xeb, 0x78, 0xbd, 0xeb, 0x71,
	0xc5, 0x57, 0xc8, 0x6e, 0xaa, 0x56, 0xed, 0x1c, 0xa1, 0x30, 0xad, 0x4c, 0xe3, 0x64, 0xe3, 0x68,
	0xb2, 0x4c, 0x2e, 0xe7, 0x2c, 0xb6, 0xe4, 0x19, 0xcc, 0x7f, 0xf0, 0x56, 0xf1, 0x8d, 0x96, 0x96,
	0xa6, 0xcb, 0xd1, 0xe5, 0x9c, 0x0d, 0x03, 0x72, 0x0e, 0x13, 0x7b, 0x27, 0xb5, 0xa6, 0xa3, 0xf0,
	0x57, 0xdf, 0x14, 0xbf, 0x13, 0x98, 0x7d, 0xe8, 0x84, 0x72, 0x9f, 0xcd, 0x96, 0xbc, 0x81, 0x69,
	0xd5, 0x4a, 0xee, 0xa4, 0x08, 0xd4, 0xf9, 0xd5, 0x45, 0xd9, 0xfb, 0x2a, 0xa3, 0xaf, 0xf2, 0x4b,
	0xf4, 0xc5, 0x22, 0xd4, 0xcb, 0x62, 0xb9, 0xde, 0xd3, 0x34, 0x90, 0x0f, 0x03, 0xcf, 0xd9, 0xed,
	0x44, 0xe0, 0x1c, 0x3d, 0xce, 0x89, 0x50, 0xcf, 0x89, 0xe5, 0x7a, 0x4f, 0xc7, 0x3d, 0xe7, 0x61,
	0x50, 0xfc, 0x4a, 0x60, 0xf1, 0x49, 0x59, 0x67, 0xda, 0x3d, 0x93, 0x95, 0x69, 0x05, 0x39, 0x85,
	0x54, 0xf5, 0xa6, 0x4f, 0x58, 0xaa, 0x04, 0x59, 0x42, 0x7e, 0xdb, 0x69, 0x7d, 0x6d, 0xea, 0x9a,
	0x37, 0x02, 0x5d, 0x3d, 0x1c, 0x91, 0x33, 0x18, 0x39, 0xb7, 0xc7, 0x65, 0xf8, 0x92, 0xbc, 0x87,
	0xf9, 0x61, 0xeb, 0x41, 0xf3, 0xff, 0x5e, 0x07, 0x30, 0x21, 0x30, 0xee, 0xac, 0x6c, 0xe9, 0x24,
	0x90, 0x85, 0xba, 0xf8, 0x93, 0xc0, 0xd9, 0x47, 0x53, 0x75, 0xb5, 0x6c, 0x9c, 0x14, 0x78, 0xbb,
	0x7f, 0x6d, 0xbe, 0x84, 0xcc, 0x86, 0x2f, 0xc1, 0x61, 0x7e, 0xb5, 0x28, 0xfb, 0x6c, 0xf4, 0x70,
	0x86, 0x1f, 0xfd, 0xe9, 0xb8, 0x56, 0xdc, 0xc6, 0xd3, 0x85, 0xc6, 0xab, 0x3a, 0xbe, 0xb5, 0x74,
	0x1c, 0x2e, 0x1d, 0x6a, 0xf2, 0x02, 0x16, 0x02, 0x45, 0xb9, 0x53, 0xa6, 0x41, 0x4b, 0xc7, 0x43,
	0xf2, 0x0a, 0x66, 0x1c, 0x6f, 0x4e, 0xb3, 0x20, 0xfc, 0x04, 0x85, 0x63, 0x14, 0xd8, 0x01, 0x50,
	0xbc, 0x85, 0x53, 0xdc, 0xd9, 0xb5, 0xcf, 0xd9, 0xbd, 0x1b, 0x92, 0x94, 0x3c, 0x48, 0x92, 0x7f,
	0x9b, 0xb1, 0xb8, 0xe9, 0xd4, 0xd8, 0xe2, 0x67, 0x02, 0xd3, 0x1b, 0x69, 0xad, 0x17, 0xc4, 0x65,
	0x27, 0xc3, 0xb2, 0x57, 0x98, 0xe2, 0xfb, 0xf8, 0xf4, 0xa7, 0xe8, 0xe0, 0x58, 0x8b, 0x45, 0x14,
	0x79, 0x07, 0x27, 0x9a, 0x5b, 0xf7, 0xbd, 0xc2, 0x93, 0xf6, 0x61, 0x3a, 0xc7, 0xbf, 0x8e, 0xd2,
	0xc0, 0x72, 0x8f, 0x44, 0xa2, 0xf5, 0xec, 0x5b, 0x56, 0x1b, 0x21, 0xb5, 0xdd, 0x64, 0xe1, 0x8a,
	0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x07, 0xcd, 0x16, 0x3d, 0x81, 0x03, 0x00, 0x00,
}
