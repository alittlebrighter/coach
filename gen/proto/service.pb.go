// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScriptsQuery struct {
	TagQuery string `protobuf:"bytes,1,opt,name=tagQuery" json:"tagQuery,omitempty"`
}

func (m *ScriptsQuery) Reset()                    { *m = ScriptsQuery{} }
func (m *ScriptsQuery) String() string            { return proto1.CompactTextString(m) }
func (*ScriptsQuery) ProtoMessage()               {}
func (*ScriptsQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ScriptsQuery) GetTagQuery() string {
	if m != nil {
		return m.TagQuery
	}
	return ""
}

type GetScriptsResponse struct {
	Scripts []*DocumentedScript `protobuf:"bytes,1,rep,name=scripts" json:"scripts,omitempty"`
}

func (m *GetScriptsResponse) Reset()                    { *m = GetScriptsResponse{} }
func (m *GetScriptsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetScriptsResponse) ProtoMessage()               {}
func (*GetScriptsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetScriptsResponse) GetScripts() []*DocumentedScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

// RunEventIn has multiple uses, the first event should contain the tag of the script
// to run in the input.  Subsequent events should contain responses to requests for input
// and finally it should end with an EOF.
type RunEventIn struct {
	Input string    `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Env   []*EnvVar `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	// specify the batch size in bytes you would like the response output to come in
	ResponseSize uint32 `protobuf:"varint,3,opt,name=responseSize" json:"responseSize,omitempty"`
}

func (m *RunEventIn) Reset()                    { *m = RunEventIn{} }
func (m *RunEventIn) String() string            { return proto1.CompactTextString(m) }
func (*RunEventIn) ProtoMessage()               {}
func (*RunEventIn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RunEventIn) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *RunEventIn) GetEnv() []*EnvVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *RunEventIn) GetResponseSize() uint32 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

type RunEventOut struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	// exitCode means nothing until stream finishes
	ExitCode int32 `protobuf:"varint,3,opt,name=exitCode" json:"exitCode,omitempty"`
}

func (m *RunEventOut) Reset()                    { *m = RunEventOut{} }
func (m *RunEventOut) String() string            { return proto1.CompactTextString(m) }
func (*RunEventOut) ProtoMessage()               {}
func (*RunEventOut) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RunEventOut) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *RunEventOut) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RunEventOut) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type EnvVar struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EnvVar) Reset()                    { *m = EnvVar{} }
func (m *EnvVar) String() string            { return proto1.CompactTextString(m) }
func (*EnvVar) ProtoMessage()               {}
func (*EnvVar) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SaveScriptRequest struct {
	Script    *DocumentedScript `protobuf:"bytes,1,opt,name=script" json:"script,omitempty"`
	Overwrite bool              `protobuf:"varint,2,opt,name=overwrite" json:"overwrite,omitempty"`
}

func (m *SaveScriptRequest) Reset()                    { *m = SaveScriptRequest{} }
func (m *SaveScriptRequest) String() string            { return proto1.CompactTextString(m) }
func (*SaveScriptRequest) ProtoMessage()               {}
func (*SaveScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *SaveScriptRequest) GetScript() *DocumentedScript {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *SaveScriptRequest) GetOverwrite() bool {
	if m != nil {
		return m.Overwrite
	}
	return false
}

type Response struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto1.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Response) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto1.RegisterType((*ScriptsQuery)(nil), "coach.ScriptsQuery")
	proto1.RegisterType((*GetScriptsResponse)(nil), "coach.GetScriptsResponse")
	proto1.RegisterType((*RunEventIn)(nil), "coach.RunEventIn")
	proto1.RegisterType((*RunEventOut)(nil), "coach.RunEventOut")
	proto1.RegisterType((*EnvVar)(nil), "coach.EnvVar")
	proto1.RegisterType((*SaveScriptRequest)(nil), "coach.SaveScriptRequest")
	proto1.RegisterType((*Response)(nil), "coach.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoachRPC service

type CoachRPCClient interface {
	Scripts(ctx context.Context, in *ScriptsQuery, opts ...grpc.CallOption) (*GetScriptsResponse, error)
	RunScript(ctx context.Context, opts ...grpc.CallOption) (CoachRPC_RunScriptClient, error)
	SaveScript(ctx context.Context, in *SaveScriptRequest, opts ...grpc.CallOption) (*Response, error)
}

type coachRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoachRPCClient(cc *grpc.ClientConn) CoachRPCClient {
	return &coachRPCClient{cc}
}

func (c *coachRPCClient) Scripts(ctx context.Context, in *ScriptsQuery, opts ...grpc.CallOption) (*GetScriptsResponse, error) {
	out := new(GetScriptsResponse)
	err := grpc.Invoke(ctx, "/coach.CoachRPC/Scripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachRPCClient) RunScript(ctx context.Context, opts ...grpc.CallOption) (CoachRPC_RunScriptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoachRPC_serviceDesc.Streams[0], c.cc, "/coach.CoachRPC/RunScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &coachRPCRunScriptClient{stream}
	return x, nil
}

type CoachRPC_RunScriptClient interface {
	Send(*RunEventIn) error
	Recv() (*RunEventOut, error)
	grpc.ClientStream
}

type coachRPCRunScriptClient struct {
	grpc.ClientStream
}

func (x *coachRPCRunScriptClient) Send(m *RunEventIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coachRPCRunScriptClient) Recv() (*RunEventOut, error) {
	m := new(RunEventOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coachRPCClient) SaveScript(ctx context.Context, in *SaveScriptRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/coach.CoachRPC/SaveScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoachRPC service

type CoachRPCServer interface {
	Scripts(context.Context, *ScriptsQuery) (*GetScriptsResponse, error)
	RunScript(CoachRPC_RunScriptServer) error
	SaveScript(context.Context, *SaveScriptRequest) (*Response, error)
}

func RegisterCoachRPCServer(s *grpc.Server, srv CoachRPCServer) {
	s.RegisterService(&_CoachRPC_serviceDesc, srv)
}

func _CoachRPC_Scripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachRPCServer).Scripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coach.CoachRPC/Scripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachRPCServer).Scripts(ctx, req.(*ScriptsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoachRPC_RunScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoachRPCServer).RunScript(&coachRPCRunScriptServer{stream})
}

type CoachRPC_RunScriptServer interface {
	Send(*RunEventOut) error
	Recv() (*RunEventIn, error)
	grpc.ServerStream
}

type coachRPCRunScriptServer struct {
	grpc.ServerStream
}

func (x *coachRPCRunScriptServer) Send(m *RunEventOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coachRPCRunScriptServer) Recv() (*RunEventIn, error) {
	m := new(RunEventIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CoachRPC_SaveScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachRPCServer).SaveScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coach.CoachRPC/SaveScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachRPCServer).SaveScript(ctx, req.(*SaveScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoachRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coach.CoachRPC",
	HandlerType: (*CoachRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scripts",
			Handler:    _CoachRPC_Scripts_Handler,
		},
		{
			MethodName: "SaveScript",
			Handler:    _CoachRPC_SaveScript_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunScript",
			Handler:       _CoachRPC_RunScript_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto1.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x52, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0x25, 0x5b, 0xf3, 0xd1, 0xdb, 0x2d, 0xb2, 0x57, 0xd1, 0x18, 0x04, 0xcb, 0x3c, 0x05, 0x1f,
	0x56, 0xad, 0xa0, 0xe8, 0xa3, 0x75, 0x59, 0x7c, 0x5a, 0x9d, 0x82, 0x82, 0x6f, 0x69, 0x7a, 0xa9,
	0x01, 0x3b, 0x13, 0xe7, 0x23, 0x7e, 0xfc, 0x30, 0x7f, 0x9f, 0x64, 0x66, 0xd2, 0x68, 0x29, 0x3e,
	0xcd, 0x9c, 0x93, 0x3b, 0xe7, 0xdc, 0x9c, 0x7b, 0x61, 0xae, 0x49, 0x75, 0x4d, 0x4d, 0x97, 0xad,
	0x92, 0x46, 0x62, 0x5c, 0xcb, 0xaa, 0xfe, 0x52, 0xcc, 0xdc, 0xe1, 0x39, 0xf6, 0x18, 0xce, 0xd7,
	0xb5, 0x6a, 0x5a, 0xa3, 0x3f, 0x58, 0x52, 0x3f, 0xb1, 0x80, 0xcc, 0x54, 0x3b, 0x77, 0xcf, 0xa3,
	0x45, 0x54, 0x4e, 0xf9, 0x01, 0xb3, 0x6b, 0xc0, 0x6b, 0x32, 0xa1, 0x9c, 0x93, 0x6e, 0xa5, 0xd0,
	0x84, 0xcf, 0x20, 0xd5, 0x9e, 0xca, 0xa3, 0xc5, 0xa4, 0x9c, 0x2d, 0xef, 0x5f, 0x7a, 0x83, 0xb7,
	0xb2, 0xb6, 0x7b, 0x12, 0x86, 0xb6, 0xfe, 0x09, 0x1f, 0xea, 0xd8, 0x0e, 0x80, 0x5b, 0x71, 0xd5,
	0x91, 0x30, 0xef, 0x04, 0xde, 0x85, 0xb8, 0x11, 0xad, 0x35, 0xc1, 0xcf, 0x03, 0x7c, 0x04, 0x13,
	0x12, 0x5d, 0x7e, 0xe6, 0x24, 0xe7, 0x41, 0xf2, 0x4a, 0x74, 0x1f, 0x2b, 0xc5, 0xfb, 0x2f, 0xc8,
	0xe0, 0x5c, 0x85, 0x1e, 0xd6, 0xcd, 0x2f, 0xca, 0x27, 0x8b, 0xa8, 0x9c, 0xf3, 0x7f, 0x38, 0xf6,
	0x09, 0x66, 0x83, 0xd1, 0x8d, 0x35, 0x78, 0x0f, 0x12, 0x69, 0xcd, 0x68, 0x15, 0x50, 0xdf, 0x01,
	0x29, 0x25, 0x55, 0x7e, 0xe6, 0x3b, 0x70, 0xa0, 0x8f, 0x82, 0x7e, 0x34, 0x66, 0x25, 0xb7, 0x5e,
	0x3c, 0xe6, 0x07, 0xcc, 0x96, 0x90, 0xf8, 0x5e, 0x10, 0xe1, 0x96, 0xa8, 0xf6, 0x14, 0x14, 0xdd,
	0xbd, 0xd7, 0xeb, 0xaa, 0xaf, 0x96, 0x06, 0x3d, 0x07, 0xd8, 0x06, 0x2e, 0xd6, 0x55, 0x47, 0x21,
	0x0c, 0xfa, 0x66, 0x49, 0x1b, 0x7c, 0x02, 0x89, 0x4f, 0xc5, 0x09, 0xfc, 0x27, 0xbc, 0x50, 0x86,
	0x0f, 0x61, 0x2a, 0x3b, 0x52, 0xdf, 0x55, 0x63, 0xbc, 0x7e, 0xc6, 0x47, 0x82, 0xbd, 0x86, 0xec,
	0x30, 0x98, 0x1c, 0x52, 0x6d, 0xeb, 0x9a, 0xb4, 0x76, 0xda, 0x19, 0x1f, 0xe0, 0xe9, 0xff, 0x5d,
	0xfe, 0x8e, 0x20, 0x5b, 0xf5, 0xe6, 0xfc, 0xfd, 0x0a, 0x5f, 0x41, 0x1a, 0x06, 0x8d, 0x77, 0x42,
	0x4b, 0x7f, 0xef, 0x49, 0xf1, 0x20, 0x90, 0x27, 0x16, 0xe2, 0x05, 0x4c, 0xb9, 0x15, 0x9e, 0xc5,
	0x8b, 0x50, 0x37, 0xce, 0xbb, 0xc0, 0x23, 0xea, 0xc6, 0x9a, 0x32, 0x7a, 0x1a, 0xe1, 0x4b, 0x80,
	0x31, 0x1f, 0xcc, 0x07, 0xd7, 0xe3, 0xc8, 0x8a, 0xdb, 0xc3, 0xfb, 0x60, 0xf8, 0x26, 0xfd, 0x1c,
	0xbb, 0x65, 0xde, 0x24, 0xee, 0x78, 0xfe, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x56, 0xe0, 0x6a,
	0xf8, 0x02, 0x00, 0x00,
}
