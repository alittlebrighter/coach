// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScriptsQuery struct {
	TagQuery string `protobuf:"bytes,1,opt,name=tagQuery" json:"tagQuery,omitempty"`
}

func (m *ScriptsQuery) Reset()                    { *m = ScriptsQuery{} }
func (m *ScriptsQuery) String() string            { return proto1.CompactTextString(m) }
func (*ScriptsQuery) ProtoMessage()               {}
func (*ScriptsQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ScriptsQuery) GetTagQuery() string {
	if m != nil {
		return m.TagQuery
	}
	return ""
}

type GetScriptsResponse struct {
	Scripts []*DocumentedScript `protobuf:"bytes,1,rep,name=scripts" json:"scripts,omitempty"`
}

func (m *GetScriptsResponse) Reset()                    { *m = GetScriptsResponse{} }
func (m *GetScriptsResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetScriptsResponse) ProtoMessage()               {}
func (*GetScriptsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetScriptsResponse) GetScripts() []*DocumentedScript {
	if m != nil {
		return m.Scripts
	}
	return nil
}

// RunEventIn has multiple uses, the first event should contain the tag of the script
// to run in the input.  Subsequent events can contain responses to requests for input
//
type RunEventIn struct {
	Input string    `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
	Env   []*EnvVar `protobuf:"bytes,2,rep,name=env" json:"env,omitempty"`
	// specify the batch size in bytes you would like the response output to come in
	ResponseSize uint32 `protobuf:"varint,3,opt,name=responseSize" json:"responseSize,omitempty"`
}

func (m *RunEventIn) Reset()                    { *m = RunEventIn{} }
func (m *RunEventIn) String() string            { return proto1.CompactTextString(m) }
func (*RunEventIn) ProtoMessage()               {}
func (*RunEventIn) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *RunEventIn) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *RunEventIn) GetEnv() []*EnvVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *RunEventIn) GetResponseSize() uint32 {
	if m != nil {
		return m.ResponseSize
	}
	return 0
}

type RunEventOut struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	// exitCode means nothing until stream finishes
	ExitCode int32 `protobuf:"varint,2,opt,name=exitCode" json:"exitCode,omitempty"`
}

func (m *RunEventOut) Reset()                    { *m = RunEventOut{} }
func (m *RunEventOut) String() string            { return proto1.CompactTextString(m) }
func (*RunEventOut) ProtoMessage()               {}
func (*RunEventOut) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *RunEventOut) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *RunEventOut) GetExitCode() int32 {
	if m != nil {
		return m.ExitCode
	}
	return 0
}

type EnvVar struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EnvVar) Reset()                    { *m = EnvVar{} }
func (m *EnvVar) String() string            { return proto1.CompactTextString(m) }
func (*EnvVar) ProtoMessage()               {}
func (*EnvVar) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *EnvVar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EnvVar) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto1.RegisterType((*ScriptsQuery)(nil), "coach.ScriptsQuery")
	proto1.RegisterType((*GetScriptsResponse)(nil), "coach.GetScriptsResponse")
	proto1.RegisterType((*RunEventIn)(nil), "coach.RunEventIn")
	proto1.RegisterType((*RunEventOut)(nil), "coach.RunEventOut")
	proto1.RegisterType((*EnvVar)(nil), "coach.EnvVar")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoachRPC service

type CoachRPCClient interface {
	Scripts(ctx context.Context, in *ScriptsQuery, opts ...grpc.CallOption) (*GetScriptsResponse, error)
	RunScript(ctx context.Context, opts ...grpc.CallOption) (CoachRPC_RunScriptClient, error)
}

type coachRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoachRPCClient(cc *grpc.ClientConn) CoachRPCClient {
	return &coachRPCClient{cc}
}

func (c *coachRPCClient) Scripts(ctx context.Context, in *ScriptsQuery, opts ...grpc.CallOption) (*GetScriptsResponse, error) {
	out := new(GetScriptsResponse)
	err := grpc.Invoke(ctx, "/coach.CoachRPC/Scripts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachRPCClient) RunScript(ctx context.Context, opts ...grpc.CallOption) (CoachRPC_RunScriptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoachRPC_serviceDesc.Streams[0], c.cc, "/coach.CoachRPC/RunScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &coachRPCRunScriptClient{stream}
	return x, nil
}

type CoachRPC_RunScriptClient interface {
	Send(*RunEventIn) error
	Recv() (*RunEventOut, error)
	grpc.ClientStream
}

type coachRPCRunScriptClient struct {
	grpc.ClientStream
}

func (x *coachRPCRunScriptClient) Send(m *RunEventIn) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coachRPCRunScriptClient) Recv() (*RunEventOut, error) {
	m := new(RunEventOut)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CoachRPC service

type CoachRPCServer interface {
	Scripts(context.Context, *ScriptsQuery) (*GetScriptsResponse, error)
	RunScript(CoachRPC_RunScriptServer) error
}

func RegisterCoachRPCServer(s *grpc.Server, srv CoachRPCServer) {
	s.RegisterService(&_CoachRPC_serviceDesc, srv)
}

func _CoachRPC_Scripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptsQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachRPCServer).Scripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coach.CoachRPC/Scripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachRPCServer).Scripts(ctx, req.(*ScriptsQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoachRPC_RunScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoachRPCServer).RunScript(&coachRPCRunScriptServer{stream})
}

type CoachRPC_RunScriptServer interface {
	Send(*RunEventOut) error
	Recv() (*RunEventIn, error)
	grpc.ServerStream
}

type coachRPCRunScriptServer struct {
	grpc.ServerStream
}

func (x *coachRPCRunScriptServer) Send(m *RunEventOut) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coachRPCRunScriptServer) Recv() (*RunEventIn, error) {
	m := new(RunEventIn)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CoachRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "coach.CoachRPC",
	HandlerType: (*CoachRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scripts",
			Handler:    _CoachRPC_Scripts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunScript",
			Handler:       _CoachRPC_RunScript_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto1.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x65, 0x5b, 0xd3, 0x8f, 0x69, 0x7b, 0x70, 0x14, 0x8d, 0xb9, 0x18, 0x72, 0x0a, 0x1e, 0x8a,
	0x56, 0x10, 0x3c, 0x6a, 0x2c, 0xc5, 0x53, 0x75, 0x0b, 0x1e, 0xbc, 0xc5, 0x74, 0xa8, 0x01, 0xbb,
	0x1b, 0x92, 0xdd, 0xa0, 0x82, 0xff, 0x5d, 0xb2, 0xbb, 0x6d, 0x55, 0x3c, 0xcd, 0xbc, 0xb7, 0x33,
	0xf3, 0x66, 0xde, 0xc2, 0xa8, 0xa2, 0xb2, 0xce, 0x33, 0x1a, 0x17, 0xa5, 0x54, 0x12, 0xbd, 0x4c,
	0xa6, 0xd9, 0x6b, 0x30, 0x30, 0xc1, 0x72, 0xd1, 0x19, 0x0c, 0x17, 0x59, 0x99, 0x17, 0xaa, 0x7a,
	0xd4, 0x54, 0x7e, 0x60, 0x00, 0x3d, 0x95, 0xae, 0x4c, 0xee, 0xb3, 0x90, 0xc5, 0x7d, 0xbe, 0xc5,
	0xd1, 0x0c, 0x70, 0x46, 0xca, 0x95, 0x73, 0xaa, 0x0a, 0x29, 0x2a, 0xc2, 0x0b, 0xe8, 0x56, 0x96,
	0xf2, 0x59, 0xd8, 0x8e, 0x07, 0x93, 0xe3, 0xb1, 0x15, 0xb8, 0x93, 0x99, 0x5e, 0x93, 0x50, 0xb4,
	0xb4, 0x2d, 0x7c, 0x53, 0x17, 0xad, 0x00, 0xb8, 0x16, 0xd3, 0x9a, 0x84, 0xba, 0x17, 0x78, 0x08,
	0x5e, 0x2e, 0x0a, 0xad, 0x9c, 0x9e, 0x05, 0x78, 0x0a, 0x6d, 0x12, 0xb5, 0xdf, 0x32, 0x23, 0x47,
	0x6e, 0xe4, 0x54, 0xd4, 0x4f, 0x69, 0xc9, 0x9b, 0x17, 0x8c, 0x60, 0x58, 0xba, 0x1d, 0x16, 0xf9,
	0x27, 0xf9, 0xed, 0x90, 0xc5, 0x23, 0xfe, 0x8b, 0x8b, 0x6e, 0x60, 0xb0, 0x11, 0x9a, 0x6b, 0x85,
	0x47, 0xd0, 0x91, 0x5a, 0xed, 0xa4, 0x1c, 0x6a, 0x8e, 0xa6, 0xf7, 0x5c, 0x25, 0x72, 0x49, 0x7e,
	0x2b, 0x64, 0xb1, 0xc7, 0xb7, 0x38, 0x9a, 0x40, 0xc7, 0xaa, 0x22, 0xc2, 0x9e, 0x48, 0xd7, 0xe4,
	0x7a, 0x4d, 0xde, 0xec, 0x5e, 0xa7, 0x6f, 0xda, 0xb6, 0xf5, 0xb9, 0x05, 0x93, 0x2f, 0xe8, 0x25,
	0xcd, 0xbe, 0xfc, 0x21, 0xc1, 0x6b, 0xe8, 0x3a, 0xc7, 0xf0, 0xc0, 0x5d, 0xf1, 0xd3, 0xf0, 0xe0,
	0xc4, 0x91, 0xff, 0x38, 0x7b, 0x05, 0x7d, 0xae, 0x85, 0x65, 0x71, 0xdf, 0xd5, 0xed, 0x8c, 0x0b,
	0xf0, 0x0f, 0x35, 0xd7, 0x2a, 0x66, 0xe7, 0xec, 0xb6, 0xfb, 0xec, 0x99, 0xcf, 0x7d, 0xe9, 0x98,
	0x70, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x47, 0x96, 0x14, 0xb9, 0x08, 0x02, 0x00, 0x00,
}
